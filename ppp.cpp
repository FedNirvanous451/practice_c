#include <iostream> 
using namespace std;
int main()
{
    setlocale(0,""); // Для использования русского языка
    int j, N;
    N = 5;
    int A[5][5] = { // иницилизация матрицы А
    {0,4,2,7,2},
    {4,0,3,5,8},
    {2,3,0,10,2},
    {7,5,10,0,9},
    {2,8,2,9,0}
    };
    
    int B[5][5] = { // иницилизация матрицы B
    {0,0,0,0,0},
    {0,0,0,0,0},
    {0,0,0,0,0},
    {0,0,0,0,0},
    {0,0,0,0,0}};



    int* flag = new int[N]; // создание динамического массива
    int* far = new int[N]; // создание динамического массива
    for (int i = 0; i < N; i++) // записываем в массив нули
    {
        flag[i] = 0;
        far[i] = 0;
    }

    // flag = {0, 0, 0, 0, 0}
    // far = {0, 0, 0, 0, 0}

    flag[0] = 1; // flag = {1, 0, 0, 0, 0}
    for(int k = 0; k < N - 1; k++)
    {
        int minr = 1000000000;
        for (int i = 1; i < N; i++)
        {
            if (flag[i] == 0 && A[far[i]][i] < minr) // находим миниальное в строке
            {
                minr = A[far[i]][i];
                j = i; // записываем в j i, который будет обозначать номер столбца 
            }
        }
        flag[j] = 1;

        for (int i = 1; i < N; i++)
        {
            if (flag[i] == 0 && A[far[i]][i] > A[i][j])
            {
                far[i] = j; // записываем наивыгоднейший путь в j, который будет обозначать номер столбца
            }
        }
    }

    for (int i = 0; i < N; i++)
    {
        if(far[i] != i)
        {
            B[far[i]][i] = 1;
            B[i][far[i]] = 1;
        }
    }

    // Вывод результатов
    cout<< "Матрица А\n"; // Вывод в консоль

    for(int i = 0; i < N; i++)
    {
        for(int j = 0; j < N; j++)
        {
            cout << A[i][j] << " ";
        }
        cout << "\n";
    }
    cout <<"Матрица B\n"; // Вывод в консоль
    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            cout << B[i][j]<< " ";
        }
        cout<< "\n";
    }
}